syntax = "proto3";

import "google/protobuf/struct.proto";

service SpiffeBrokerAPI {
    /////////////////////////////////////////////////////////////////////////
    // X509-SVID Profile
    /////////////////////////////////////////////////////////////////////////

    // Fetch X.509-SVIDs for all SPIFFE identities the referenced workload is 
    // entitled to, as well as related information like trust bundles. As this
    // information changes, subsequent messages will be streamed from the server.
    rpc FetchX509SVID(X509SVIDRequest) returns (stream X509SVIDResponse);

    // Fetch trust bundles of the referenced workload. Useful in situations that
    // only need to validate SVIDs without obtaining an SVID for themself. As this
    // information changes, subsequent messages will be streamed from the server.
    rpc FetchX509Bundles(X509BundlesRequest) returns (stream X509BundlesResponse);

    /////////////////////////////////////////////////////////////////////////
    // JWT-SVID Profile
    /////////////////////////////////////////////////////////////////////////

    // Fetch JWT-SVIDs for all SPIFFE identities the referenced workload is 
    // entitled to, for the requested audience. If an optional SPIFFE ID is 
    // requested, only the JWT-SVID for that SPIFFE ID is returned.
    rpc FetchJWTSVID(JWTSVIDRequest) returns (JWTSVIDResponse);

    // Fetches the JWT bundles, formatted as JWKS documents, keyed by the
    // SPIFFE ID of the trust domain. As this information changes, subsequent
    // messages will be streamed from the server.
    rpc FetchJWTBundles(JWTBundlesRequest) returns (stream JWTBundlesResponse);
}

// The WorkloadPIDReference message conveys a process id reference of a workload 
// running in the same environment.
message WorkloadPIDReference {
    // Required. The process id of the workload.
    string pid = 1;
}

// The X509SVIDRequest message conveys parameters for requesting an X.509-SVID.
message X509SVIDRequest {
    // Required. The reference identifying the workload.
    oneof reference {
        WorkloadPIDReference pid = 1;
    }
}

// The X509SVIDResponse message carries X.509-SVIDs and related information,
// including a list of bundles the workload may use for federating with foreign
// trust domains.
message X509SVIDResponse {
    // Required. A list of X509SVID messages, each of which includes a single
    // X.509-SVID, its private key, and the bundle for the trust domain.
    repeated X509SVID svids = 1;

    // Optional. CA certificate bundles belonging to foreign trust domains that
    // the workload should trust, keyed by the SPIFFE ID of the foreign trust
    // domain. Bundles are ASN.1 DER encoded.
    map<string, bytes> federated_bundles = 2;
}

// The X509SVID message carries a single SVID and all associated information,
// including the X.509 bundle for the trust domain.
message X509SVID {
    // Required. The SPIFFE ID of the SVID in this entry
    string spiffe_id = 1;

    // Required. ASN.1 DER encoded certificate chain. MAY include
    // intermediates, the leaf certificate (or SVID itself) MUST come first.
    bytes x509_svid = 2;

    // Required. ASN.1 DER encoded PKCS#8 private key. MUST be unencrypted.
    bytes x509_svid_key = 3;

    // Required. ASN.1 DER encoded X.509 bundle for the trust domain.
    bytes bundle = 4;

    // Optional. An operator-specified string used to provide guidance on how this
    // identity should be used by a broker or workload when more than one SVID is 
    // returned. For example, `internal` and `external` to indicate an SVID for 
    // internal or external use, respectively.
    string hint = 5;
}

// The X509BundlesRequest message conveys parameters for requesting X.509
// bundles.
message X509BundlesRequest {
    // Required. The reference identifying the workload.
    oneof reference {
        WorkloadPIDReference pid = 1;
    }
}

// The X509BundlesResponse message carries a map of trust bundles the workload 
// should trust.
message X509BundlesResponse {
    // Required. CA certificate bundles belonging to trust domains that the
    // workload should trust, keyed by the SPIFFE ID of the trust domain.
    // Bundles are ASN.1 DER encoded.
    map<string, bytes> bundles = 1;
}

// The JWTSVIDRequest message conveys parameters for requesting JWT-SVIDs.
message JWTSVIDRequest {
    // Required. The reference identifying the workload.
    oneof reference {
        WorkloadPIDReference pid = 1;
    }

    // Required. The audience(s) the workload intends to authenticate against.
    repeated string audience = 2;

    // Optional. The requested SPIFFE ID for the JWT-SVID. If unset, all
    // JWT-SVIDs to which the workload is entitled are requested.
    string spiffe_id = 3;
}

// The JWTSVIDResponse message conveys JWT-SVIDs.
message JWTSVIDResponse {
    // Required. The list of returned JWT-SVIDs.
    repeated JWTSVID svids = 1;
}

// The JWTSVID message carries the JWT-SVID token and associated metadata.
message JWTSVID {
    // Required. The SPIFFE ID of the JWT-SVID.
    string spiffe_id = 1;

    // Required. Encoded JWT using JWS Compact Serialization.
    string svid = 2;

    // Optional. An operator-specified string used to provide guidance on how this
    // identity should be used by a workload when more than one SVID is returned.
    // For example, `internal` and `external` to indicate an SVID for internal or
    // external use, respectively.
    string hint = 3;
}

// The JWTBundlesRequest message conveys parameters for requesting JWT bundles.
message JWTBundlesRequest { 
    // Required. The reference identifying the workload.
    oneof reference {
        WorkloadPIDReference pid = 1;
    }
}

// The JWTBundlesReponse conveys JWT bundles.
message JWTBundlesResponse {
    // Required. JWK encoded JWT bundles, keyed by the SPIFFE ID of the trust
    // domain.
    map<string, bytes> bundles = 1;
}

// The WorkloadReferenceError message is used to convey errors related to workload references.
message WorkloadReferenceError {
    // Required. The error code.
    WorkloadReferenceErrorCode code = 1;
}

// The WorkloadReferenceErrorCode enum defines the possible error codes for workload reference errors.
enum WorkloadReferenceErrorCode {
    UNSPECIFIED = 0;

    // The workload reference is invalid, e.g., it does not match the expected format.
    WORKLOAD_REFERENCE_INVALID = 1;

    // The referenced workload could not be found.
    WORKLOAD_REFERENCE_NOT_FOUND = 2;

    // The workload is not entitled to the receive the requested SVID or bundle.
    WORKLOAD_NOT_ENTITLED = 3;
}
