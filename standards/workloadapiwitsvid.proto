// Initial draft of WIT-SVID profile for Workload API
syntax = "proto3";

service SpiffeWorkloadAPI {
  /////////////////////////////////////////////////////////////////////////
  // WIT-SVID Profile
  /////////////////////////////////////////////////////////////////////////

  // Fetch WIT-SVIDs for all SPIFFE identities the workload is entitled to,
  // as well as related information like trust bundles. As this information
  // changes, subsequent messages will be streamed from the server.
  //
  // Will return Unimplemented where Workload API endpoint does not support the
  // WIT-SVID profile.
  rpc FetchWITSVID(WITSVIDRequest) returns (stream WITSVIDResponse);

  // Fetch trust bundles. Useful for clients that only need to validate SVIDs
  // without obtaining an SVID for themselves. As this information changes,
  // subsequent messages will be streamed from the server.
  //
  // Will return Unimplemented where Workload API endpoint does not support the
  // WIT-SVID profile.
  rpc FetchWITBundles(WITBundlesRequest) returns (stream WITBundlesResponse);

  // ... RPCS for other profiles ...
}

// The WITSVIDRequest message conveys parameters for requesting a WIT-SVID.
// There are currently no such parameters.
message WITSVIDRequest {
  // TODO(noah): Eventually, we may consider introducing workload key generation
  // here. But this is out of scope for the introduction of WIT-SVID.
}

// The WITSVIDResponse message carries WIT-SVIDs.
message WITSVIDResponse {
  // Required.
  // A list of WITSVID messages, each of which includes a single WIT-SVID and
  // its private key.
  repeated WITSVID svids = 1;
}

// The WITSVID message carries a single SVID and all associated information,
// including the WIT bundle for the trust domain.
message WITSVID {
  // Required.
  // The SPIFFE ID of the SVID in this entry
  string spiffe_id = 1;

  // Required.
  // Encoded WIT SVID using compact JWS serialization.
  string wit_svid = 2;

  // Required.
  // JWK (RFC 7517) encoded private key for the WIT SVID.
  string wit_svid_key = 3;

  // Optional.
  // An operator-specified string used to provide guidance on how this identity
  // should be used by a workload when more than one SVID is returned.
  // For example, `internal` and `external` to indicate a SVID for internal or
  // external use, respectively.
  string hint = 4;
}

// The WITBundlesRequest message conveys parameters for requesting WIT
// bundles. There are currently no such parameters.
message WITBundlesRequest {}

// The WITBundlesResponse message carries a map of trust bundles the workload
// should trust.
message WITBundlesResponse {
  // Required.
  // WIT trust bundles belonging to trust domains that the workload should
  // trust, keyed by the SPIFFE ID of the trust domain.
  // Bundles are encoded in JWK set (RFC 7517) format.
  map<string, string> bundles = 1;
  // Indicates that this message is part of an update that has been split across
  // multiple messages, and that this message is not the last message in the
  // update.
  //
  // If true, the client should expect more messages to follow that complete the
  // set of bundles sent in this update. The client should not process the
  // bundle set until it has received a message with `more` set to false.
  bool more = 2;
}